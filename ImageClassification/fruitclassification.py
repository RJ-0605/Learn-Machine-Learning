# -*- coding: utf-8 -*-
"""ImageClassificationModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ymUX4oB4q2I2-QhLWr1_i0yi6g1g__Ne
"""

!wget --no-check-certificate \
https://md-datasets-cache-zipfiles-prod.s3.eu-west-1.amazonaws.com/rp73yg93n8-1.zip -O /tmp/dataset.zip

from zipfile import ZipFile
import os

local_zip = '/tmp/dataset.zip'

zip_file = ZipFile(local_zip, 'r')
zip_file.extractall('/tmp')
zip_file.close()

extracted_zip = '/tmp/fruits-360_dataset.zip'

zip_file = ZipFile(extracted_zip, 'r')
zip_file.extractall('/tmp')
zip_file.close()

import pandas as pd

data_path = '/tmp/fruits-360/Training'

train_path = []
train_label = []
for label in os.listdir(data_path):
    for item in os.listdir(os.path.join(data_path, label)):
        train_path.append(data_path + '/' + label + '/' + item)
        train_label.append(label)

import pandas as pd
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(train_path, train_label, test_size=0.2, random_state=1)

training_set = pd.DataFrame({'y': y_train, 'X': X_train})
test_set = pd.DataFrame({'y': y_test, 'X': X_test})

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')
 
test_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_dataframe(
    training_set,
    x_col='X',
    y_col='y',
    target_size=(50,50),
    batch_size=4,
    class_mode='sparse'
)

validation_generator = test_datagen.flow_from_dataframe(
    test_set,
    x_col='X',
    y_col='y',
    target_size=(50,50),
    batch_size=4,
    class_mode='sparse'
)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.losses import sparse_categorical_crossentropy

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(50, 50, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(81, activation='softmax')
])

model.compile(loss=sparse_categorical_crossentropy,
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92):
      print("\nAkurasi telah mencapai >92%!")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(
            train_generator,
            epochs=20,
            steps_per_epoch=500,
            validation_data=validation_generator,
            validation_steps=100,
            verbose=2,
            callbacks=[callbacks])

import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()

plt.plot(history.history['accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='lower right')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)